<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Isaray&#39;s blog</title>
        <link>https://Isaray.github.io/posts/</link>
        <description>All Posts | Isaray&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 09 Mar 2022 16:55:20 &#43;0800</lastBuildDate><atom:link href="https://Isaray.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>浪潮之巅阅读笔记</title>
    <link>https://Isaray.github.io/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
    <pubDate>Wed, 09 Mar 2022 16:55:20 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
    <description><![CDATA[观潮]]></description>
</item><item>
    <title>Zotero的使用</title>
    <link>https://Isaray.github.io/zotero/</link>
    <pubDate>Thu, 27 Jan 2022 16:36:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/zotero/</guid>
    <description><![CDATA[Zotero的安装和使用]]></description>
</item><item>
    <title>How to build our own websites with Hugo on Windows?</title>
    <link>https://Isaray.github.io/build_websites_with_hugo/</link>
    <pubDate>Mon, 17 Jan 2022 16:36:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/build_websites_with_hugo/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/build_websites_with_hugo/featured-image.jpg" referrerpolicy="no-referrer">
            </div>Install Hugo on Wins and build your own website!]]></description>
</item><item>
    <title>六种常见算法</title>
    <link>https://Isaray.github.io/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</link>
    <pubDate>Mon, 17 Jan 2022 16:36:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</guid>
    <description><![CDATA[递归、分治、贪心、回溯、动态规划和枚举]]></description>
</item><item>
    <title>CSAPP:memory mountain</title>
    <link>https://Isaray.github.io/csapp-memory_mountain/</link>
    <pubDate>Sun, 31 Jan 2021 16:20:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/csapp-memory_mountain/</guid>
    <description><![CDATA[CSAPP:memory mountain 画memory mountain存储器山： https://blog.csdn.net/weixin_41724000/article/details/100072251 http://csapp.cs.cmu.edu/3e/students.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112  /* mountain.]]></description>
</item><item>
    <title>CSAPP:shlab</title>
    <link>https://Isaray.github.io/csapp-shlab/</link>
    <pubDate>Sun, 31 Jan 2021 16:15:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/csapp-shlab/</guid>
    <description><![CDATA[CSAPP:shlab 该实验对应CSAPP第8章：异常控制流，可以先温习该章内容再做实验。
通读实验指南，了解实验目的：
简介 The purpose of this assignment is to become more familiar with the concepts of process control and signalling. You’ll do this by writing a simple Unix shell program that supports job control.
本实验的目的就是写一个简单的Unix shell，主要任务就是修改tsh.c文件，需修改以下7个函数。
   1.void eval(char *cmdline); //解释命令[70 lines]
  2.int builtin_cmd(char **argv);//识别命令是否为内置命令quit、jobs、fg、bg ，若是，则执行对应命令.[25 lines]
    quit命令会终止shell。 jobs 命令列出所有后台工作。 bg 命令通过发送一个 SIGCONT 信号重新启动，然后在后台运行。参数可以是 PID 或 JID。 fg 命令通过发送一个 SIGCONT 信号重新启动，然后在前台运行。     3.]]></description>
</item><item>
    <title>CSAPP:malloclab</title>
    <link>https://Isaray.github.io/csapp-malloclab/</link>
    <pubDate>Sun, 31 Jan 2021 16:10:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/csapp-malloclab/</guid>
    <description><![CDATA[CSAPP:malloclab CSAPP:9.9.12 针对空闲块的组织方法有以下三种：
 a.隐式空闲链表(implicit free list) b.显式空闲链表(explicit free list) c.分离空闲链表(segregated free list)  查找空闲块的三个方法：
 a.首次适应(first fit) b.最佳适配(best fit) c.下一次适配(next fit) d.分离适配，特殊情况包括伙伴系统，优点在于快速搜索和快速合并（大小相同，地址连续）。  方案一：隐式空闲链表+first fit/next fit
 初始化堆 —— mm_init函数 mm_init步骤如下：  首先在堆上分配16个字节，包括4字节对齐块，8字节序言块，4字节结尾块。
调extend_heap扩展堆，创建初始的空闲块，大小为4096字节。
扩展堆 —— extend_heap函数 函数原型: static void *extend_heap(size_t words);  以下两种场景需要扩展堆：
 调用mm_init初始化堆时。 调用mm_malloc找不到合适的空闲块时。
 释放和合并块 —— mm_free和coalesce函数   调用mm_free释放块，步骤如下： 将当前块的头部和脚部中的分配位清零。 将这个块与它邻接的前后空闲块进行合并，采用立即合并策略。
 调用coalesce合并前后的合并块，原型：static void *coalesce(void *bp);，分四种情况：
 情况1：前面的块和后面的块都已分配 —— 不可能合并，简单返回bp即可。 情况2：前面的块已分配，后面的块空闲 —— 用当前块和后面块的大小之和更新当前块的头部和后面块的脚部。返回bp 情况3：前面的块是空闲的，后面的块是分配的 —— 用两块大小之和更新前面块的头部和后面块的脚部。返回PREV_BLKP(bp) 情况4：前面和后面的块都是空闲的 —— 用三个块大小之和更新前面块的头部和后面块的脚部。返回PREV_BLKP(bp)]]></description>
</item><item>
    <title>CSAPP:bomblab</title>
    <link>https://Isaray.github.io/csapp-bomblab/</link>
    <pubDate>Sun, 31 Jan 2021 16:05:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/csapp-bomblab/</guid>
    <description><![CDATA[CSAPP:bomblab Bomblab拆弹实录 准备工作 调试环境：  云主机Linux环境+GDB
 ssh客户端：  xshell+xftp/putty+psftp
 xshell+xftp:上传和下载文件有可视化操作界面，直接拖拽就可以上传。但是在gdb调试的时候，输入了的数据不能修改，按回车会输入^H，有的时候会手误就要重新开始。 putty+psftp：上传文件用scp命令（例如：scp hello.c xx@xxx.75.241.219/home/xx/lab0；scp -r 拷贝目录），下载文件可以用psftp。假设要下载到本地目录E:,在psftp中运行lcd E:\定位本地目录，putty切换到云主机目录之后，get 文件名即可下载。   Linux相关命令 ：   cd document切换到文件夹; cd ..返回上一级目录;ls显示文件夹中的文件;pwd当前目录位置 解压:tar -xf all.tar，tar -zxvf filename.tar.gz cat filename 显示文件内容 vim filename查看/编辑文件内容，i进入编辑模式，esc退出编辑模式，:wq保存并退出，:q没修改直接退出。 复制文件：cp document/file newdocument/newfile 重命名：mv oldname newname   GDB调试：   进入GDB调试状态，gdb filename;或先运行gdb再运行file filename info b看断点情况；b(reak) 行号/函数名 打断点；d (elete) 行号/函数名 删除断点 i r看寄存器的值。info reg esp看%esp里存储了什么。print $eax。print (char*) $ebx。 x/s 0xffff5330 打印该地址存储的字符串；x/16x 地址 答应之后16个字节的数字。 s单步执行（不会进入被调用的函数内部），si单步执行（会进入被调用的函数内部）。c接着运行到下一个断点。 display /ni $pc。用si调试每行都会显示下一行的汇编语言。   题目求解 phase_1:地址字符串  比较字符串是否相等，查看地址中预设的字符串即可。]]></description>
</item><item>
    <title>CSAPP:datalab</title>
    <link>https://Isaray.github.io/csapp-datalab/</link>
    <pubDate>Sun, 31 Jan 2021 16:00:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/csapp-datalab/</guid>
    <description><![CDATA[CSAPP:datalab 代码中有具体思路的标注。 以下为实验的说明，每道题目中有规定一些运算符能否使用，使用的符号个数，并规定一些控制结构和函数不能使用。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94  /* * CS:APP Data Lab * * * bits.]]></description>
</item><item>
    <title></title>
    <link>https://Isaray.github.io/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://Isaray.github.io/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</guid>
    <description><![CDATA[]]></description>
</item></channel>
</rss>
