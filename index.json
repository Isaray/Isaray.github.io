[{"categories":["Notes"],"content":"Zotero的安装和使用","date":"2022-01-27","objectID":"/zotero/","tags":["Tools"],"title":"Zotero的使用","uri":"/zotero/"},{"categories":["Notes"],"content":"Zotero Zotero是一款开源文献管理软件，功能和EndNote相似，但是其丰富的插件使其具有十分强大的功能。 到官网（Zotero | Downloads）下载对应版本的Zotero和浏览器插件。 按照网上教程安装Zotero插件，参考连接如下： Zotero的插件介绍 - 知乎 (zhihu.com) 安装quicklook后点击空格就可以预览。 Zotero网盘同步及文件夹重命名 - 知乎 (zhihu.com) 所有文件都存储到了onedrive的文件夹下。 下载坚果云客户端，配置文件夹可以达到同样的效果。 ","date":"2022-01-27","objectID":"/zotero/:0:0","tags":["Tools"],"title":"Zotero的使用","uri":"/zotero/"},{"categories":["Tutorial"],"content":"Install Hugo on Wins and build your own website!","date":"2022-01-17","objectID":"/build_websites_with_hugo/","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"Build our own website by using Hugo on Wins Hugo is said to be the world’s fastest framework for building websites. The world’s fastest framework for building websites | Hugo (gohugo.io) ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:1:0","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"Install Hugo There are so many tutorials for installing hugo on macOS and Linux, and this blog mainly fucuses on how to install hugo on Windows. And I recommend using method two. ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:2:0","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"Method One： Using Official Docs Hugo official installation file： Install Hugo | Hugo (gohugo.io) First, make sure you have chocolatey on your laptop with Windows system. 1. Install chocolatey on Windows Chocolatey Software Docs | Setup / Install Please remember to start a command prompt as an administrator. run the following command: @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\" \u0026\u0026 SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" Check whether hugo is installed successfully with the following command: choco help 2.Install Hugo with Chocolatey If you are on a Windows machine and use Chocolatey for package management, you can install Hugo with the following one-liner: install-with-chocolatey.ps1 choco install hugo -confirm Or if you need the “extended” Sass/SCSS version: install-extended-with-chocolatey.ps1 choco install hugo-extended -confirm ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:2:1","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"Method Two：Download hugo.exe directly 1.Download Hugo Releases · gohugoio/hugo (github.com) Download the certain version you need. Some website themes have requirements of hugo version. 2. Set Environment Variables Set the folder of hugo.exe as environment variables. Then, open another command line to check whether it is successfully set or not. Run the command in CMD: hugo version ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:2:2","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"Themes I Prefered There are many themes on the official websites. Complete List | Hugo Themes (gohugo.io) Personally I prefered the following themes. Academic | Hugo Themes (gohugo.io) Academic | Hugo Themes (gohugo.io) PaperMod | Hugo Themes (gohugo.io) Even | Hugo Themes (gohugo.io) Tranquilpeak | Hugo Themes (gohugo.io) Clean White | Hugo Themes (gohugo.io) LoveIt | Hugo Themes (gohugo.io) I use the theme LoveIt. LoveIt (hugoloveit.com) Install it according to the official document and try to build demo yourself. Theme Documentation - Basics - LoveIt (hugoloveit.com) You can also follow the steps in this video. Although it is on the MacOS system, she explained everything clearly in Chinese. Hugo - 10分钟搭建 \u0026 部署个人网站/博客，简历中的博客网站怎么建哔哩哔哩bilibili ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:3:0","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"Memos ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:4:0","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"Important Command 1.hugo serve Executehugo serve under the root folder of the project, click http://localhost:1313/ to visit your website locally. 2.hugo make sure that in the config.toml , it is written like baseUrl=“https://[username].github.io” Executehugo under the root folder of the project. For the first time you do it, the public folder will be made. If there is any mistake when compiling, it is recomended to delete all files in the public folder before execute hugo. ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:4:1","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"Publish on GitHub Pages new a repository，setting it to public。 Set the address of your blog [username].github.io at setting/pages. Set the branch to master if you use it. Executehugo under the root folder of the project. For the first time you do it, the public folder will be made.(make sure that in the config.toml , it is written like baseUrl=“https://[username].github.io”) cd public, run the command: git init git add . git commit -m\"first commit\" git add remote origin \"your reposotory address\" git push -u origin master Wait a few minites，and you can visit your website on https://[username].github.io. tips: If the your website doesn’t change after a sucessful push, please check the actions of repository. The compiling of new github pages probably failed. If there is any mistake when compiling, it is recomended to delete all files in the public folder before execute hugo. ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:4:2","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"Some mistakes I met If the style/css of the website went wrong, you should check the url and address in index.html page. Perhaps the baseUrl is wrong. ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:4:3","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Tutorial"],"content":"The Extended Functions of LoveIt： Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章 - Yulin Lewis' Blog (lewky.cn) There are four blogs in the link , including the improvements of searching！ The official link is also helpful. Theme Documentation - Extended Shortcodes - LoveIt (hugoloveit.com) Save My config.toml I revise the config.toml according to the offical demo and files, including: [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"xxx\" [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"xxx\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # 是否保持使用文章前面的静态目录 keepStatic = false [params.list] # list 页面每页显示文章数量 paginate = 10 ... Here is my config.toml I delete the function of comments, because it goes wrong on github pages. baseURL = \"https://xxx.github.io/\" # [en, zh-cn, fr, ...] determines default content language defaultContentLanguage = \"en\" # language code languageCode = \"en\" title = \"xxx's blog\" # Change the default theme to be use when building the site with Hugo theme = [\"hugo-search-fuse-js\",\"LoveIt\"] # whether to use emoji code # 是否使用 emoji 代码 enableEmoji = true [menu] [[menu.main]] identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 [[menu.main]] identifier = \"projects\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Projects\" url = \"/categories/projects/\" # title will be shown when you hover on this menu link title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [[menu.main]] identifier = \"about\" pre = \"\" post = \"\" name = \"About\" url = \"/about/\" title = \"\" weight = 5 [[menu.main]] pre = \"\u003ci class='fas fa-fw fa-search'\u003e\u003c/i\u003e\" name = \"search\" weight = 7 identifier = \"search\" url = \"/search/\" [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"LoveIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = false # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"Isaray's blog\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 ","date":"2022-01-17","objectID":"/build_websites_with_hugo/:4:4","tags":["Hugo","Installation"],"title":"How to build our own websites with Hugo on Windows?","uri":"/build_websites_with_hugo/"},{"categories":["Notes"],"content":"递归、分治、贪心、回溯、动态规划和枚举","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"1.递归 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:1:0","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"1.1算法策略 把问题分解成更小规模的同类子问题，用递归调用的方法求解问题。 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:1:1","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"1.2 适用场景 引用知乎一篇文章的总结 递归算法一般用于解决三类问题： 数据的定义是按递归定义的。（斐波那契数列） 问题解法按递归算法实现。（回溯） 数据的结构形式是按递归定义的。（树的遍历，图的搜索） 解题策略 （1）明确输入输出 （2）明确递归结束条件 （3）明确递归关系式 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:1:2","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"1.3经典问题 斐波那契数列 汉诺塔问题 树的遍历及相关操作 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:1:3","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"2.分治 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:2:0","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"2.1算法策略 将一个问题分解成多个子问题，每个子问题又可以分解成更小的子问题，直到子问题可以被求解。原问题是子问题的合并。 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:2:1","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"2.2适用场景 当出现满足以下条件的问题，可以尝试只用分治策略进行求解： 原始问题可以分成多个相似的子问题 子问题可以很简单的求解 原始问题的解是子问题解的合并 各个子问题是相互独立的，不包含相同的子问题 解题策略 分解大问题 解决子问题 合并子问题结果 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:2:2","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"2.3经典问题 二分查找 归并排序 快速排序 汉诺塔问题 React 时间分片 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:2:3","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"3.贪心 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:3:0","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"3.1算法策略 总是选择当下最优的解决方案。 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:3:1","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"3.2适用场景 当满足一下条件时，可以使用： 原问题复杂度过高 求全局最优解的数学模型难以建立或计算量过大 没有太大必要一定要求出全局最优解，“比较优”就可以 解题策略 定义最优解条件 把问题分解成多个步骤，每一步要满足 可行性：每一步都满足问题的约束 局部最优 不可取消 最后叠加所有步骤得到最优解。 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:3:2","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"3.3经典问题 使用贪心算法求解的经典问题有： 最小生成树算法 单源最短路径的 Dijkstra 算法 Huffman 压缩编码 背包问题 活动选择问题等 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:3:3","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"4.回溯 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:4:0","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"4.1算法策略 步步尝试，不行回退。 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:4:1","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"4.2适用场景 不断的尝试，直到拿到解。从一组可能的解中，选择一个满足要求的解。 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:4:2","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"4.3经典问题 深度优先搜索 0-1背包问题 正则表达式匹配 八皇后 数独 全排列 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:4:3","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"5.动态规划 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:5:0","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"5.1算法策略 Taking notes. 将复杂问题分解成小问题求解，各个子问题之间有重合，结果可以复用。 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:5:1","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"5.2适用场景 求解最优解。 解题策略 需要遵循以下几个重要步骤： 定义子问题 实现需要反复执行解决的子子问题部分 识别并求解出边界条件 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:5:2","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"5.3经典问题 爬楼梯问题：假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 背包问题：给出一些资源（有总量及价值），给一个背包（有总容量），往背包里装资源，目标是在背包不超过总容量的情况下，装入更多的价值 硬币找零：给出面额不定的一定数量的零钱，以及需要找零的钱数，找出有多少种找零方案 图的全源最短路径：一个图中包含 u、v 顶点，找出从顶点 u 到顶点 v 的最短路径 最长公共子序列：找出一组序列的最长公共子序列（可由另一序列删除元素但不改变剩下元素的顺序实现） ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:5:3","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"6.枚举 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:6:0","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"6.1算法策略 一一列举，明确列举范围。 ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:6:1","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"6.3经典问题 参考： 95% 的算法都是基于这 6 种算法思想！！！ - 知乎 (zhihu.com) BAT机器学习面试1000题系列_HuangQinJian-CSDN博客_bat机器学习1000题 剑指offer-Python版（上） - 知乎 (zhihu.com) ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:6:2","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"1.bfs,dfs dfs可以看作不知道层数情况下的枚举法，用到递归的思想。 全排列 class Solution2: def permute(self, nums: List[int]) -\u003e List[List[int]]: res = [] def backtrack(nums, tmp): if not nums: res.append(tmp) return for i in range(len(nums)): backtrack(nums[:i] + nums[i+1:], tmp + [nums[i]]) backtrack(nums, []) return res 岛屿数量 class Solution: def numIslands(self, grid): row, col, ret = len(grid), len(grid[0]), 0 def dfs(x, y): grid[x][y] = '0' for c in [[0, 1], [0, -1], [1, 0], [-1, 0]]: nx, ny = x + c[0], y + c[1] if 0 \u003c= nx \u003c row and 0 \u003c= ny \u003c col and grid[nx][ny] == '1': dfs(nx, ny) for i in range(row): for j in range(col): if grid[i][j] == '1': dfs(i, j) ret += 1 return ret ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:6:3","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"2.binary search 求x的平方根 class Solution: def mySqrt(self, x: int) -\u003e int: l, r, ans = 0, x, -1 while l \u003c= r: mid = (l + r) // 2 if mid * mid \u003c= x: ans = mid l = mid + 1 else: r = mid - 1 return ans ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:6:4","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":["Notes"],"content":"3.sliding window move them simutanously 给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。 示例 1: 输入: s = “abcabcbb” 输出: 3 解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。 class Solution: def lengthOfLongestSubstring(self, s: str) -\u003e int: cur, res = [], 0 for r in range(len(s)): while s[r] in cur: cur.pop(0) # 左边出 cur.append(s[r]) # 右侧无论如何都会进入新的 res = max(len(cur),res) return res recursion fibonacci, binary tree inverting into binary tree reverse a linked list suffix trees heaps repeatedly find min,max dynamic programming sorting algorithm quick sort and merge sort ","date":"2022-01-17","objectID":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/:6:5","tags":["Python","Algorithm"],"title":"六种常见算法","uri":"/%E5%85%AD%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"},{"categories":null,"content":"CJ Lei A student major in data science and engineering. Let’s listen to some music! ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"}]